//
//  JKBigInteger_iOSTests.m
//  JKBigInteger iOSTests
//
//  Created by J캐nis Kir코teins on 13/07/14.
//  Copyright (c) 2014 J캐nis Kir코teins. All rights reserved.
//

#import <XCTest/XCTest.h>
#import "JKBigInteger.h"

@interface JKBigInteger_iOSTests : XCTestCase

@end

@implementation JKBigInteger_iOSTests

- (void)setUp {
    [super setUp];

    // Set-up code here.
}

- (void)tearDown {
    // Tear-down code here.

    [super tearDown];
}

- (void)testExample {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"1000000000000"];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"0000001000000"];

    JKBigInteger *result = [int1 add:int2];

    XCTAssertEqualObjects([result stringValue], @"1000001000000", @"Test example failed!");
}

// FIXME: Fails on CI, need to fix
//- (void)testArchiving {
//    NSString *rootPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
//    NSString *filePath = [rootPath stringByAppendingPathComponent:@"file.file"];
//
//    // test 1
//    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"1111222233334444555566667777888899990000"];
//    [NSKeyedArchiver archiveRootObject:int1 toFile:filePath];
//
//    JKBigInteger *int2 = [NSKeyedUnarchiver unarchiveObjectWithFile:filePath];
//    XCTAssertEqualObjects([int1 stringValue], [int2 stringValue], @"Test archiving failed!");
//
//    // test2
//    int1 = [[JKBigInteger alloc] initWithString:@"-123471238940713294701327508917230516230561320512352315021305012395091032950923520395013258623185465463545681428354162345612435416523"];
//    [NSKeyedArchiver archiveRootObject:int1 toFile:filePath];
//
//    int2 = [NSKeyedUnarchiver unarchiveObjectWithFile:filePath];
//    XCTAssertEqualObjects([int1 stringValue], [int2 stringValue], @"Test archiving failed!");
//}

- (void)testDescription0 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"2131231231231231231231231231231231231239876543210"];
    NSString *result = [NSString stringWithFormat:@"%@", int1];
    XCTAssertEqualObjects(result, @"2131231231231231231231231231231231231239876543210", @"Test Description 0 failed!");
}

- (void)testEqual0 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"71039487035325136518735"];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"71039487035325136518736"];

    NSComparisonResult result = [int1 compare:int2];

    XCTAssertEqual(result, NSOrderedAscending, @"Test equal 0 failed!");
}

- (void)testEqual1 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"71039487035325136518799"];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"71039487035325136518736"];

    NSComparisonResult result = [int1 compare:int2];

    XCTAssertEqual(result, NSOrderedDescending, @"Test equal 1 failed!");
}

- (void)testEqual2 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"829472590263457620374652704650234675072346507826340750432234051"];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"829472590263457620374652704650234675072346507826340750432234051"];

    NSComparisonResult result = [int1 compare:int2];

    XCTAssertEqual(result, NSOrderedSame, @"Test equal 2 failed!");
}

// Auto generated tests below

- (void)testAdd0 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"1324363173651736969755537217937400034034948144717050671802" andRadix:10];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"835301321423387782311290724817434637195392781" andRadix:10];
    JKBigInteger *result = [int1 add:int2];

    XCTAssertEqualObjects([result stringValueWithRadix:10], @"1324363173652572271076960605719711324759765579354246064583", @"Add test 0 failed");
}
- (void)testAbs0 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"-174141545532305530573436621261026247" andRadix:8];
    JKBigInteger *result = [int1 abs];
    
    XCTAssertEqualObjects([result stringValueWithRadix:8], @"174141545532305530573436621261026247", @"Abs test 0 failed");
}

- (void)testAdd1 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"100110011000111000100101110000011100101101000000000100010111110001110110001000110010010111111100110100001011111110100100110001001110010001110110011001000010000100010101010011100111000000001110111010101001100100101110100001101100010011001111001011110010111010101011000000011000" andRadix:2];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"10101101001101000111010111100101110101000111101100010" andRadix:2];
    JKBigInteger *result = [int1 add:int2];

    XCTAssertEqualObjects([result stringValueWithRadix:2], @"100110011000111000100101110000011100101101000000000100010111110001110110001000110010010111111100110100001011111110100100110001001110010001110110011001000010000100010101010011100111000000001110111010101001100100101110100010000001111100111000000110101111101001010011111101111010", @"Add test 1 failed");
}
- (void)testSubtract0 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"1110101001010001101001010100011100001111000100010110010000000110000110011111111001101101101010110110111010000110110110111000110010011100110000110100011110000110101110010000110100110011100101111100001001001011100011001110101001101111101110010110111" andRadix:2];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"101111110100001001010011101101101110001101010001100111010011111011000100101110111001010010010101111000011100111011111011110011011011010001101001000000011001001100010110011010100000100010000001110000010110101111101111110110100001011101000100000101111011" andRadix:2];
    JKBigInteger *result = [int1 subtract:int2];
    
    XCTAssertEqualObjects([result stringValueWithRadix:2], @"-101101111110111111000110100011001010101011011001000100100001111010010011111010111010000100101000100001100101101011000100111100010100111110000010111001110101011011100000101000011001111011100101000000110101100110010011011100101100001111000110010011000100", @"Subtract test 0 failed");
}
- (void)testMultiply49 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"23423155242233670107246035244350417166556405522564120241411625256757775677114064706305045176437750" andRadix:8];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"572376514503716461341154043762316452260722642653330530721752166170222355344346302514142002674631113410745" andRadix:8];
    JKBigInteger *result = [int1 multiply:int2];

    XCTAssertEqualObjects([result stringValueWithRadix:8], @"16342715734700575357512263566664264715566755775756771377577534072336067606337436106113267655341240726314221214622512075302025505041106341313052711463020031112346575131331127213332544230154506431662311210", @"Multiply test 49 failed");
}

- (void)testDivide74 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"1011001" andRadix:2];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"1111100010100000000000001000100000010010111111101101101100000000100000011000011110110000010101111110111110111110001111011101110110100001010011000100101001111110000000111101100011010001000001011010010001111010001011101111001001110111000011110001101101110110001001011010101000011001000000101010100010101110101111100000010011011101" andRadix:2];
    JKBigInteger *result = [int1 divide:int2];

    XCTAssertEqualObjects([result stringValueWithRadix:2], @"0", @"Divide test 74 failed");
}

- (void)testRemainder71 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"140858225741874842867350212766776839043096335971001" andRadix:10];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"82786168863581269" andRadix:10];
    JKBigInteger *result = [int1 remainder:int2];

    XCTAssertEqualObjects([result stringValueWithRadix:10], @"63951569667810859", @"Remainder test 71 failed");
}


- (void)testDivideAndRemainder9 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"8f3e53849665f8cc6883d9abbbf420e57" andRadix:16];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"addbf9284354f33a5c9edc8e876cb300fc5488d8bb5a" andRadix:16];
    NSArray *arr = [int1 divideAndRemainder:int2];
    JKBigInteger *result0 = (JKBigInteger *)arr[0];
    JKBigInteger *result1 = (JKBigInteger *)arr[1];

    XCTAssertEqualObjects([result0 stringValueWithRadix:16], @"0", @"DivideAndRemainder test 9 failed");
    XCTAssertEqualObjects([result1 stringValueWithRadix:16], @"8f3e53849665f8cc6883d9abbbf420e57", @"DivideAndRemainder test 9 failed");
}



- (void)testDivideAndRemainder88 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"264768292416701662666322482258310158792683" andRadix:10];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"758794875022773609744326301" andRadix:10];
    NSArray *arr = [int1 divideAndRemainder:int2];
    JKBigInteger *result0 = (JKBigInteger *)arr[0];
    JKBigInteger *result1 = (JKBigInteger *)arr[1];

    XCTAssertEqualObjects([result0 stringValueWithRadix:10], @"348932631376503", @"DivideAndRemainder test 88 failed");
    XCTAssertEqualObjects([result1 stringValueWithRadix:10], @"535270168136338314142487280", @"DivideAndRemainder test 88 failed");
}

- (void)testNegate0 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"-2750131224152760014475320211" andRadix:8];
    JKBigInteger *result = [int1 negate];
    
    XCTAssertEqualObjects([result stringValueWithRadix:8], @"2750131224152760014475320211", @"Negate test 0 failed");
}

- (void)testDivideAndRemainder91 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"110011000110111011001010000110100011000010110111001000000110111101110100100101110111101100110011000010000011111101011111000011000111111000101100111000000111101101110000111101101100101001000001100011010011000010001011010011110001" andRadix:2];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"111100111100011010001111000100110010100011011100110010100100001010001101010000011101100010000111011001000011000011000001011001000" andRadix:2];
    NSArray *arr = [int1 divideAndRemainder:int2];
    JKBigInteger *result0 = (JKBigInteger *)arr[0];
    JKBigInteger *result1 = (JKBigInteger *)arr[1];

    XCTAssertEqualObjects([result0 stringValueWithRadix:2], @"110101101010111100101011110111001000110001111111111110100100110110110100101000010011010001111011110", @"DivideAndRemainder test 91 failed");
    XCTAssertEqualObjects([result1 stringValueWithRadix:2], @"111011011011011100100111100110100111100111001101111110000001010001000101011001100000010111101000001110111001010111111001110000001", @"DivideAndRemainder test 91 failed");
}


- (void)testPow55 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"111111" andRadix:2];
    JKBigInteger *result = [int1 pow:51];

    XCTAssertEqualObjects([result stringValueWithRadix:2], @"11100101010101000100010011011010111110000001100010000010101000011100100100010011010001010001101011111110111101101011011111111000110101100111000111101111101011100111001110110011010001100010101110100111001110000100011011011110010000000001111111001010100001100000010101111001000011001000101000101110010111111", @"Pow test 55 failed");
}


- (void)testPow65 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"2a854d93" andRadix:16];
    JKBigInteger *result = [int1 pow:24];

    XCTAssertEqualObjects([result stringValueWithRadix:16], @"395f06f232b07208db71ba371b98efee8049cbe5695877f805f2d1085b4f67cf3b0c79119fc310f14b1c5ee17d80f4ddec08fe6281a8c1121fcb909a621e65a100a4745485bf94c70b67e8059e55c62984163e1718fff4961", @"Pow test 65 failed");
}

- (void)testPow66 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"11110101010101011100011" andRadix:2];
    JKBigInteger *result = [int1 pow:65];

    XCTAssertEqualObjects([result stringValueWithRadixow test 66 failed");
}


- (void)testXor9 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"11c26236d9b57b8cb1130b735e87d55ad06bfdca4245290f314609" andRadix:16];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"1aaedcff6d7d03" andRadix:16];
    JKBigInteger *result = [int1 bitwiseXor:int2];

    XCTAssertEqualObjects([result stringValueWithRadix:16], @"11c26236d9b57b8cb1130b735e87d55ad06bfdca58ebf5f05c3b0a", @"Xor test 9 failed");
}

- (void)testAnd42 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"100000001100100011011011001010011100000001100011010100000101001100001111101010000000011110100100100010111110010001000010001101000100001100001000100010011010000100111111000101011000100000011000100111111101011110001110110111011100101010111011110110000001110000111100000110000100110101101111010100111111" andRadix:2];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"1001010100010111010101001001011001011101000010011101010000110011110101100001001101011000011010111011000111010001000110011000011111110001000110001011111101001111001000110111111101001101010010001001001011111101110010111011110011101100101101010010100011100000100111110001100101000101111000" andRadix:2];
    JKBigInteger *result = [int1 bitwiseAnd:int2];

    XCTAssertEqualObjects([result stringValueWithRadix:2], @"1010000000010010100000001000001010100000000001100000000100010000000000000000100000000011010010001000010000001000100001000001000100000000010000000111101000101001000100000011000000101010000001000001010110101010000101010110011100100000001010000100000000000000100110001100101000100111000", @"And test 42 failed");
}

- (void)testShiftLeft45 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"1027f887d1ffa4052acb76d23" andRadix:16];
    JKBigInteger *result = [int1 shiftLeft:39];

    XCTAssertEqualObjects([result stringValueWithRadix:16], @"813fc43e8ffd2029565bb6918000000000", @"Shift left test 45 failed");
}


- (void)testGCD99 {
    JKBigInteger *int1 = [[JKBigInteger alloc] initWithString:@"1000000011100000001110011100010101100011100000011111100101110100100010100000111111000001000110111" andRadix:2];
    JKBigInteger *int2 = [[JKBigInteger alloc] initWithString:@"1000111111010101000000010110010100111010101011101110011100100010111010111" andRadix:2];
    JKBigInteger *result = [int1 gcd:int2];
    
    XCTAssertEqualObjects([result stringValueWithRadix:2], @"1", @"GCD test 99 failed");
}


@end
